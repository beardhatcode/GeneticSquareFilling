#!/usr/bin/python3
import glob, os, shutil
import subprocess, re
import csv
import time,datetime

depend=["genetic_base.c","main.c","polygon.c"]

now_dir = os.path.join(os.getcwd(),"param_results",
        datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S'))
os.makedirs(now_dir)


def doCompile(settings):
    settings_list = ["-D"+key+"="+str(settings[key]) for key in settings];
    cmd = ["mpicc", "-Wall", "-std=c99", "-DPERFORMANCE_PRINT"]
    cmd = cmd + settings_list
    cmd = cmd + ["-g","-o","maxdist"] +depend + [ "-I.", "-lm"];
    print("Compiling...\n"," ".join(cmd));
    p=subprocess.Popen(cmd, cwd=os.path.join("..","src"),stdout=subprocess.PIPE,stderr=subprocess.PIPE);
    out, err = p.communicate();

    if p.returncode != 0:
        print(out.rstrip(), "\n ERROR \n",err.rstrip());
        return False;

    return True;

def doRun(num,poly):
    cmd = [os.path.join("..","src","maxdist"), str(num), "../tests/"+poly+".poly"]
    start = time.time();
    p=subprocess.Popen(cmd, cwd=os.path.join("..","src"),stdout=subprocess.PIPE,stderr=subprocess.PIPE);
    out, err = p.communicate();
    end=time.time();


    if p.returncode != 0:
        print(out.rstrip(), "\n ERROR \n",err.rstrip());
        return False;
    else:
        data=out.rstrip().decode("utf-8").split("\n");
        #print(out.rstrip(), "\n ERROR \n",err.rstrip().decode("utf-8"));
        return {"i":int(data[1]),"f":float(data[3]),"t":end-start};




def writeCSV(taget_file,keys,dictarray):
    f = open(taget_file, 'w')
    dict_writer = csv.DictWriter(f, keys)
    dict_writer.writer.writerow(keys)
    dict_writer.writerows(dictarray)
    f.close()









problemSizes = [2,5,15,20,50]

numTests = 50;

tests = {
        "NUM_INDIVIDUS":[{"NUM_INDIVIDUS":a}
                            for a in [10,20,25,50,75,90,100,125,150,250,500,750,1000]],
        "LOVER_PERCENT":[{"NUM_INDIVIDUS":256,"LOVER_PERCENT":a}
                            for a in [0,5,10,20,30,40,50,60,70,80,90,100]],
        "SELECTION_PRESSURE":[{"SELECTION_PRESSURE":a}
                            for a in [0,5,10,20,50,75,100,150]],
        "MUTATION_1_IN":[{"MUTATION_1_IN":a}
                            for a in [100000,100,50,10,5,2,1]],
        "MUTATION_DELTA":[{"MUTATION_DELTA":a}
                            for a in [10000,1000,100,50,20,10,5,1,0.5]]
}


polygons = ["soos","vierkant","icosagon"]

for testName in tests:
    tableData = [];
    for setting in tests[testName]:
        print("Working on:",testName,"-",setting);
        if doCompile(setting):
            for problemSize in problemSizes:
                for poly in polygons:
                    results = []
                    numSucces = 0;
                    sumTime = 0.0;
                    sumIterations = 0;
                    sumFitness = 0.0;
                    for i in range(1,numTests):
                        time.sleep(1)
                        cur = doRun(problemSize,poly);
                        #print(cur);
                        results.append(cur);
                        if cur["i"] < 50000:
                            sumIterations = sumIterations + cur["i"];
                            sumTime = sumTime + cur["t"];
                            sumFitness = sumFitness + cur["f"];
                            numSucces = numSucces +1;
                    if numSucces != 0:
                        print(setting,problemSize,{"i":sumIterations/numSucces,"f":sumFitness/numSucces,"t":sumTime/ numSucces,"s":numSucces});
                        tableData.append({"testName":testName,"testValue":setting[testName],"n":problemSize,"p":poly,"i":sumIterations/numSucces,"f":sumFitness/numSucces,"t":sumTime/ numSucces,"s":numSucces})
                    else:
                        print(setting, problemSize, "failed");


        print(tableData);
        writeCSV(os.path.join(now_dir,testName +".log"),["p","n","testName","testValue","i","f","t","s"],tableData);
